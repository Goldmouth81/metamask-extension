import type { Options } from 'yargs';
import yargs from 'yargs/yargs';
import { Browser, Browsers, Manifest } from './helpers';

type Optionses = { [key: string]: Options };
type OptionsKeys = keyof Omit<ReturnType<typeof getOptions>, "include" | "exclude">;


// `modeOptions` is separate because it is used multiple times
const modeOptions = {
  mode: {
    alias: 'm',
    array: false,
    default: 'development' as const,
    description:
      'Enables/disables production optimizations or development hints.',
    choices: ['development', 'production'] as const,
    group: 'Build options:',
    // `as const` makes it easier for devs to see the values of the type when hovering over it in their IDE
    // `satisfies Options` enables type checking, without loosing the `const` property of the values, which
    // is neccessary yargs to infer the final types
  },
} as const satisfies Optionses;

// TODO: get these types working
const { loadBuildTypesConfig } = require('../development/lib/build-type') as {
  loadBuildTypesConfig: () => {
    features: { [x: string]: unknown };
    buildTypes: { [x: string]: { features: string[] } };
  };
};

/**
 * Yargs doesn't support comma-separated arrays, e.g.,
 * `myprogram --multi one,two,three --multi four`, this function gives us the
 * ability to "coerce" the CSV string into an array, so the result will now be:
 * `{ multi: ['one', 'two', 'three', 'four'] }`.
 *
 * Note: CSV parsing is a naive string-split-on-comma approach.
 *
 * @param array
 */
function parseArrayOptionAsCsv<T extends string = string>(
  array: string[],
): T[] {
  return array.flatMap<T>((v) => v.split(',') as T[]);
}

/**
 * Parses the given args from `argv` and returns whether or not the build is
 * for production.
 *
 * @param argv
 * @param modeOptions
 * @param options
 * @returns
 */
function getIsProduction(argv: string[], options: typeof modeOptions): boolean {
  const { mode } = yargs()
    .help(false)
    .version(false)
    .showHelpOnFail(false)
    .options(options)
    .parseSync(argv);
  return mode === 'production';
}

/**
 * Parses an array of command line arguments into a structured format.
 *
 * @param argv - An array of command line arguments, excluding the program
 * executable and file name. Typically used as
 * `parseArgv(process.argv.slice(2))`.
 * @returns An object representing the parsed arguments.
 */
export const parseArgv = (argv: string[]) => {
  const { features: allFeatures, buildTypes } = loadBuildTypesConfig();
  const allBuildTypeNames = Object.keys(buildTypes);
  const allFeatureNames = Object.keys(allFeatures);

  // peek ahead at the args to determine if we're in production mode as some
  // defaults are different for production vs development.
  const isProduction = getIsProduction(argv, modeOptions);

  const options = getOptions(isProduction, allBuildTypeNames, allFeatureNames);
  const cli = generateCli(options);
  const { $0, _, include, i, exclude, e, ...config } = cli.parseSync(argv);

  const active = new Set<string>();
  const defaultFeaturesForBuildType = buildTypes[config.type]?.features ?? [];
  const setActive = (f: string) => exclude.includes(f) || active.add(f);
  [defaultFeaturesForBuildType, include].forEach((a) => a.forEach(setActive));

  return {
    features: {
      active,
      all: new Set(allFeatureNames),
    },
    // narrow the `config` type to only the options we're returning
    config: config satisfies { [key in OptionsKeys as key]: typeof config[key] },
  };
};

/**
 * Generates a yargs instance for parsing CLI arguments.
 *
 * @param argv
 * @param options
 */
export function generateCli<T extends ReturnType<typeof getOptions>>(
  options: T,
) {
  const cli = yargs()
    // Ensure unrecognized commands/options are reported as errors.
    .strict()
    // wrap output at a maximum of 120 characters or `process.stdout.columns`
    .wrap(Math.min(120, process.stdout.columns))
    // enable the `completion` command, which outputs a bash completion script
    .completion(
      'completion',
      'To enable bash/zsh completions, concat the script generated by running this command to your .bashrc or .bash_profile (or .zshrc for zsh).',
    )
    // enable the --config command, which allows the user to specify a custom
    // config file containing webpack options
    .config()
    // enable ENV parsing, which allows the user to specify webpack options via
    // environment variables prefixed with `BUNDLE_`
    // TODO: choose a better name than `BUNDLE` (it looks like `MM` is already being used in CI for ✨something✨)
    .env('BUNDLE')
    // use the scriptName in `--help` output
    .scriptName('yarn webpack')
    .example(
      '$0 --mode development --browser brave --browser chrome --zip',
      'Builds the extension in dev mode for Chrome & Brave; generates zip files for both.',
    )
    .example(
      '$0 completion',
      'Generates a bash completion script for the `yarn webpack` command.',
    )
    .options(options);

  return cli;
}

function getOptions(
  isProduction: boolean,
  buildTypes: string[],
  allFeatures: string[],
) {
  return {
    ...modeOptions,
    watch: {
      alias: 'w',
      array: false,
      default: false,
      description: 'Run build and watch for files changes.',
      group: 'Developer assistance:',
      type: 'boolean',
    },
    cache: {
      alias: 'c',
      array: false,
      default: true,
      description: 'Cache changes for faster rebuilds.',
      group: 'Developer assistance:',
      type: 'boolean',
    },
    progress: {
      alias: 'p',
      array: false,
      default: true,
      description: 'Show build progress.',
      group: 'Developer assistance:',
      type: 'boolean',
    },
    devtool: {
      alias: 'd',
      array: false,
      default: isProduction ? 'hidden-source-map' : 'source-map',
      defaultDescription:
        'If mode is `production`, `hidden-source-map`, otherwise `source-map`.',
      description: 'Sourcemap type to generate.',
      choices: ['none', 'source-map', 'hidden-source-map'] as const,
      group: 'Developer assistance:',
      type: 'string',
    },
    zip: {
      alias: 'z',
      array: false,
      default: false,
      description: 'Generate a zip file of the build.',
      group: 'Build options:',
      type: 'boolean',
    },
    uglify: {
      alias: 'u',
      array: false,
      default: isProduction,
      defaultDescription: 'If mode is `production`, `true`, otherwise `false`.',
      description: 'Minify the output.',
      group: 'Build options:',
      type: 'boolean',
    },
    browser: {
      alias: 'b',
      array: true,
      choices: Browsers,
      coerce: (array: string[]) => parseArrayOptionAsCsv<Browser>(array),
      default: 'chrome',
      description: 'Browsers to build for.',
      group: 'Build options:',
      type: 'string',
    },
    manifest_version: {
      alias: 'v',
      array: false,
      choices: [2, 3] as Manifest['manifest_version'][],
      default: 2 as Manifest['manifest_version'],
      description: 'Changes manifest.json format to the provided version\'s schema.',
      group: 'Build options:',
      type: 'number',
    },
    type: {
      alias: 't',
      array: false,
      choices: ['none', ...buildTypes],
      default: 'main' as const,
      description:
        'Enables/disables feature flags based on the given type (main, beta, flask, etc).',
      group: 'Build options:',
      type: 'string',
    },
    include: {
      alias: 'i',
      array: true,
      choices: allFeatures,
      coerce: parseArrayOptionAsCsv,
      default: [] as typeof allFeatures,
      description:
        'Enables features that are not included in the selected build type.',
      group: 'Build options:',
      type: 'string',
    },
    exclude: {
      alias: 'e',
      array: true,
      choices: allFeatures,
      coerce: parseArrayOptionAsCsv,
      default: [] as typeof allFeatures,
      description:
        'Disables features that are included in the selected build type.',
      group: 'Build options:',
      type: 'string',
    },
    lavamoat: {
      alias: 'l',
      array: false,
      default: isProduction,
      defaultDescription: 'If mode is `production`, `true`, otherwise `false`.',
      description:
        'Apply LavaMoat (https://github.com/LavaMoat/LavaMoat) to the build assets.',
      group: 'Security:',
      type: 'boolean',
    },
    snow: {
      alias: 's',
      array: false,
      default: isProduction,
      defaultDescription: 'If mode is `production`, `true`, otherwise `false`.',
      description:
        'Apply Snow (https://github.com/LavaMoat/Snow) to the build assets.',
      group: 'Security:',
      type: 'boolean',
    },
  } as const satisfies Optionses;
}
